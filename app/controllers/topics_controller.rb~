class TopicsController < ApplicationController
  load_and_authorize_resource
  before_filter :authenticate_user!
  # GET /topics
  # GET /topics.json
  def index
    if params[:search]
      @user = User.find(params[:user_id])
      @topics = @user.topics.search(params[:search])
    else
      @user = User.find(params[:user_id])
      @topics = @user.topics.all.order('id ASC').includes(:user)
    end
  end

  # GET /topics/1
  # GET /topics/1.json
  def show
    @user = User.find(params[:user_id])
    @topic = @user.topics.find(params[:id])
  end

  # GET /topics/new
  def new
    @user = User.find(params[:user_id])
    @topic = @user.topics.build
  end

  # GET /topics/1/edit
  def edit
    @user = User.find(params[:user_id])
    @topic = @user.topics.find(params[:id])
  end

  # POST /topics
  # POST /topics.json
  def create
    @user = User.find(params[:user_id])
    @topic = @user.topics.create(topic_params)
    @topic.user_id = current_user.id
    respond_to do |format|
      if @topic.save
        format.html { redirect_to user_topics_url, notice: 'Topic was successfully created.' }
        format.json { render :show, status: :created, location: @topic }
      else
        format.html { render :new }
        format.json { render json: @topic.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /topics/1
  # PATCH/PUT /topics/1.json
  def update
    @user = User.find(params[:user_id])
    @topic = @user.topics.find(params[:id])
    if @topic.update(topic_params)
      redirect_to user_topics_url, notice: 'Topic was successfully updated.'
    else
      render 'edit'
    end
  end

  # DELETE /topics/1
  # DELETE /topics/1.json
  def destroy
    @user = User.find(params[:user_id])
    @topic = @user.topics.find(params[:id])
    @topic.destroy
    respond_to do |format|
      format.html { redirect_to user_topics_url, notice: 'Topic was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.

    # Never trust parameters from the scary internet, only allow the white list through.
    def topic_params
      params.require(:topic).permit(:level, :description, :avatar, :chs, :identity, :semester, :attachment)
    end
end
